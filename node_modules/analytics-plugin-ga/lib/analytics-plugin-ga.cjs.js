'use strict';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var ua;

{
  ua = require('universal-analytics');
}

var config = {
  /* Your site tracking ID */
  trackingId: null
};
var NAMESPACE = 'google-analytics';
/* Export the integration */

function googleAnalytics(userConfig) {
  var gaSettings = _objectSpread({}, config, userConfig);

  var client = ua(gaSettings.trackingId);
  return {
    NAMESPACE: NAMESPACE,
    config: gaSettings,
    // page view
    page: function page(_ref) {
      var payload = _ref.payload,
          config = _ref.config;
      var properties = payload.properties;
      var path = properties.path,
          href = properties.href,
          title = properties.title;

      if (!path || !href || !title) {
        throw new Error('Missing path, href or title in page call for GA');
      }

      client.pageview(path, href, title).send();
    },
    // track event
    track: function track(_ref2) {
      var payload = _ref2.payload,
          config = _ref2.config;
      var event = payload.event,
          properties = payload.properties;
      var category = properties.category || 'All'; // todo finish

      var label = properties.label || 'NA'; // todo finish

      client.event(category, event, label, properties).send();
    } // identify user
    // identify: ({ payload }) => {
    //   const { userId, traits } = payload
    //   client.identify({ userId, traits })
    // }

  };
}

/* global ga */

/* This module will shake out unused code + work in browser and node ðŸŽ‰ */

var index = googleAnalytics;

module.exports = index;
