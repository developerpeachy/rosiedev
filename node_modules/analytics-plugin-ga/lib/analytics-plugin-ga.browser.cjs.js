'use strict';

/* global ga */
// import '../../analytics-core/src/pluginTypeDef'
// Analytics Integration Configuration
var config$1 = {
  /* Google analytics tracking ID */
  trackingId: null
  /**
   * Google analytics plugin
   * @link https://analytics.google.com/analytics/web/
   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs
   * @param {object} pluginConfig - Plugin settings
   * @param {string} pluginConfig.trackingId - site tracking Id
   * @return {AnalyticsPlugin}
   * @example
   *
   * googleAnalytics({
   *   siteId: '123-xyz'
   * })
   */

};
function googleAnalytics$1(pluginConfig) {
  // Allow for userland overides of base methods
  return {
    NAMESPACE: 'google-analytics',
    config: Object.assign({}, config$1, pluginConfig),
    initialize: function initialize(_ref) {
      var config = _ref.config;

      if (!config.trackingId) {
        throw new Error('No google tracking id defined');
      }

      if (typeof ga === 'undefined') {
        /* eslint-disable */
        (function (i, s, o, g, r, a, m) {
          i['GoogleAnalyticsObject'] = r;
          i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments);
          }, i[r].l = 1 * new Date();
          a = s.createElement(o), m = s.getElementsByTagName(o)[0];
          a.async = 1;
          a.src = g;
          m.parentNode.insertBefore(a, m);
        })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
        /* eslint-enable */


        ga('create', config.trackingId, 'auto');

        if (config.debug) {
          // Disable sends to GA http://bit.ly/2Ro0vTR
          ga('set', 'sendHitTask', null);
          window.ga_debug = {
            trace: true
          };
        }
        /* Fire page view when script loads
        if (config.firePageViewOnLoad) {
          ga('send', 'pageview')
        }
        */

      }
    },
    // Google Analytics page view
    page: function page(_ref2) {
      var payload = _ref2.payload,
          config = _ref2.config;
      if (typeof ga === 'undefined') return;
      var properties = payload.properties;

      if (config.debug) {
        console.log("google analytics pageview > [payload: ".concat(JSON.stringify(payload, null, 2), "]"));
      }

      ga('set', 'page', properties.path);
      ga('send', 'pageview');
    },
    // Google Analytics track event
    track: function track(_ref3) {
      var payload = _ref3.payload,
          config = _ref3.config;
      if (typeof ga === 'undefined') return;
      var properties = payload.properties,
          event = payload.event;
      var label = properties.label,
          value = properties.value,
          category = properties.category,
          nonInteraction = properties.nonInteraction;
      var gaData = {
        // hitType https://bit.ly/2Jab9L1
        hitType: 'event',
        // 'pageview', 'screenview', 'event', 'transaction', 'item', 'social', 'exception', 'timing'
        // eventAction https://bit.ly/2CUzeoz
        eventAction: event,
        // eventCategory http://bit.ly/2EAy9UP
        eventCategory: category || 'All',
        // nonInteraction https://bit.ly/2CUzeoz
        nonInteraction: nonInteraction !== undefined ? !!nonInteraction : false
      };

      if (config.debug) {
        console.log("GOOGLE Event > [".concat(event, "] [payload: ").concat(JSON.stringify(properties, null, 2), "]"));
        var debugLabel = label ? " [Label: ".concat(label, "]") : '';
        var debugValue = value ? " [Value: ".concat(value, "]") : '';
        var debugInteraction = nonInteraction ? " [nonInteraction: ".concat(nonInteraction, "]") : '';
        var debugCat = gaData.eventCategory ? " [Category: ".concat(gaData.eventCategory, "]") : '';
        var debugGA = "GA Event > ".concat(debugCat, " [Action: ").concat(event, "]").concat(debugLabel).concat(debugValue).concat(debugInteraction);
        console.log(debugGA);
      }

      if (label) {
        // what form is this? If this is part of an A/B test, what variation?
        gaData.eventLabel = label;
      }

      if (value) {
        // how much is this action worth?
        gaData.eventValue = value;
      }
      /* Todo attach campaign data from context
      if (campaign.name) payload.campaignName = campaign.name;
      if (campaign.source) payload.campaignSource = campaign.source;
      if (campaign.medium) payload.campaignMedium = campaign.medium;
      if (campaign.content) payload.campaignContent = campaign.content;
      if (campaign.term) payload.campaignKeyword = campaign.term;
       const payload = {
        eventAction: track.event(),
        eventCategory: track.category() || this._category || 'All',
        eventLabel: props.label,
        eventValue: formatValue(props.value || track.revenue()),
        // Allow users to override their nonInteraction integration setting for any single particluar event.
        nonInteraction: props.nonInteraction !== undefined ? !!props.nonInteraction : !!opts.nonInteraction
      }
      */
      // console.log(`GA Payload Event > [${JSON.stringify(gaData, null, 2)}]`)


      ga('send', 'event', gaData);
    },
    identify: function identify(_ref4) {
      var payload = _ref4.payload;
      if (typeof ga === 'undefined') return;
      var userId = payload.userId;

      if (config$1.debug) {
        console.log("google analytics identify > [payload: ".concat(JSON.stringify(payload, null, 2), "]"));
      }

      if (userId) {
        ga('set', 'userId', userId);
      }
      /* Todo implement custom dimensions http://bit.ly/2yULdOO & http://bit.ly/2NS5nOE
      // user mapping required
      ga('set', {'dimensionX': valueX, 'dimensionY': valueY, 'dimensionZ': valueZ});
      */

    },
    loaded: function loaded() {
      return !!window.gaplugins;
    }
  };
}

/* This module will shake out unused code + work in browser and node ðŸŽ‰ */

var index = googleAnalytics$1;

module.exports = index;
