var analyticsUtils = (function (exports) {
  'use strict';

  var inBrowser = typeof window !== 'undefined';

  /**
   * Check if browser has access to cookies
   *
   * @returns {Boolean}
   */

  function hasCookies() {
    try {
      if (!inBrowser) return false;
      var key = 'cookietest='; // Try to set cookie

      document.cookie = "".concat(key, "1");
      var cookiesEnabled = document.cookie.indexOf(key) !== -1; // Cleanup cookie

      document.cookie = "".concat(key, "1; expires=Thu, 01-Jan-1970 00:00:01 GMT");
      return cookiesEnabled;
    } catch (e) {
      return false;
    }
  }

  var cookiesSupported = hasCookies();
  function setCookie(name, value, days) {
    if (!cookiesSupported) return false;
    var expires = '';

    if (days) {
      var date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = "; expires=".concat(date.toGMTString());
    }

    document.cookie = "".concat(name, "=").concat(value).concat(expires, "; path=/");
  }
  function getCookie(name) {
    if (!cookiesSupported) return false;
    var find = "".concat(name, "=");
    var allCookies = document.cookie.split(';');

    for (var i = 0; i < allCookies.length; i++) {
      var cookie = allCookies[i];

      while (cookie.charAt(0) === ' ') {
        cookie = cookie.substring(1, cookie.length);
      }

      if (cookie.indexOf(find) === 0) {
        return cookie.substring(find.length, cookie.length);
      }
    }

    return null;
  }
  function removeCookie(name) {
    if (!cookiesSupported) return false;
    setCookie(name, '', -1);
  }
  var cookie = {
    getCookie: getCookie,
    setCookie: setCookie,
    removeCookie: removeCookie
  };

  function decode(s) {
    return decodeURIComponent(s).replace(/\+/g, ' ');
  }

  function getBrowserLocale() {
    if (!inBrowser) return null;
    var _navigator = navigator,
        language = _navigator.language,
        languages = _navigator.languages,
        userLanguage = _navigator.userLanguage;

    if (languages && languages.length) {
      // latest versions of Chrome and Firefox set this correctly
      return languages[0];
    } // IE only


    if (userLanguage) {
      return userLanguage;
    } // latest versions of Chrome, Firefox, and Safari set this correctly


    return language;
  }

  function getTimeZone() {
    if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat !== 'function' || typeof Intl.DateTimeFormat().resolvedOptions !== 'function') {
      return null;
    }

    return Intl.DateTimeFormat().resolvedOptions().timeZone;
  }
  /* alt approach
  try {
    return Intl.DateTimeFormat().resolvedOptions().timeZone
  } catch (error) {
    // nothing
  }
  */

  function isExternalReferrer(ref) {
    if (!inBrowser) return false;
    var referrer = ref || document.referrer;

    if (referrer) {
      var port = window.document.location.port;
      var _ref = referrer.split('/')[2];

      if (port) {
        _ref = _ref.replace(":".concat(port), '');
      }

      return _ref !== window.location.hostname;
    }

    return false;
  }

  /**
   * Check if a script is loaded
   * @param  {String|RegExp} script - Script src as string or regex
   * @return {Boolean} is script loaded
   */

  function isScriptLoaded(script) {
    if (!inBrowser) return true;
    var scripts = document.getElementsByTagName('script');
    return !!Object.keys(scripts).filter(function (key) {
      var src = scripts[key].src;

      if (typeof script === 'string') {
        return src.indexOf(script) !== -1;
      } else if (script instanceof RegExp) {
        return src.match(script);
      }

      return false;
    }).length;
  }

  function noOp() {}

  function paramsClean(url, param) {
    var search = (url.split('?') || [,])[1];

    if (!search || search.indexOf(param) === -1) {
      return url;
    } // remove all utm params from URL search


    var regex = new RegExp("(\\&|\\?)".concat(param, "([_A-Za-z0-9\"+=.%]+)"), 'g');
    var cleanSearch = "?".concat(search).replace(regex, '').replace(/^&/, '?'); // replace search params with clean params

    var cleanURL = url.replace("?".concat(search), cleanSearch); // use browser history API to clean the params

    return cleanURL;
  }

  /**
   * Get a given query parameter value
   * @param  {string} param - Key of parameter to find
   * @param  {string} url - url to search
   * @return {string} match
   */

  function getValueParamValue(param, url) {
    return decode((RegExp("".concat(param, "=(.+?)(&|$)")).exec(url) || [, ''])[1]);
  }

  /**
   * Get search string from given url
   * @param  {string} [url] - optional url string. If no url, window.location.search will be used
   * @return {string} url search string
   */

  function getSearchString(url) {
    if (url) {
      var p = url.match(/\?(.*)/);
      return p && p[1] ? p[1].split('#')[0] : '';
    }

    return inBrowser && window.location.search.substring(1);
  }
  /**
   * Parse url parameters into javascript object
   * @param  {string} [url] - URI to parse. If no url supplied window.location will be used
   * @return {object} parsed url parameters
   */


  function paramsParse(url) {
    var searchString = getSearchString(url);
    return searchString ? getParamsAsObject(searchString) : {};
  }
  /*
  ?first=abc&a[]=123&a[]=false&b[]=str&c[]=3.5&a[]=last
  https://random.url.com?Target=Report&Method=getStats&fields%5B%5D=Offer.name&fields%5B%5D=Advertiser.company&fields%5B%5D=Stat.clicks&fields%5B%5D=Stat.conversions&fields%5B%5D=Stat.cpa&fields%5B%5D=Stat.payout&fields%5B%5D=Stat.date&fields%5B%5D=Stat.offer_id&fields%5B%5D=Affiliate.company&groups%5B%5D=Stat.offer_id&groups%5B%5D=Stat.date&filters%5BStat.affiliate_id%5D%5Bconditional%5D=EQUAL_TO&filters%5BStat.affiliate_id%5D%5Bvalues%5D=1831&limit=9999
  https://random.url.com?Target=Offer&Method=findAll&filters%5Bhas_goals_enabled%5D%5BTRUE%5D=1&filters%5Bstatus%5D=active&fields%5B%5D=id&fields%5B%5D=name&fields%5B%5D=default_goal_name
  http://localhost:3000/?Target=Offer&Method=findAll&filters[has_goals_enabled][TRUE]=1&filters[status]=active&filters[wow]arr[]=yaz&filters[wow]arr[]=naz&fields[]=id&fields[]=name&fields[]=default_goal_name */

  function getParamsAsObject(query) {
    var re = /([^&=]+)=?([^&]*)/g;
    var params = {};
    var e;

    while (e = re.exec(query)) {
      // eslint-disable-line
      var k = decode(e[1]);
      var v = decode(e[2]);

      if (k.substring(k.length - 2) === '[]') {
        k = k.substring(0, k.length - 2);
        (params[k] || (params[k] = [])).push(v);
      } else {
        var val = v === '' ? true : v;
        params[k] = val;
      }
    }

    for (var prop in params) {
      var structure = prop.split('[');

      if (structure.length > 1) {
        var levels = [];
        structure.forEach(function (item, i) {
          // eslint-disable-line
          var key = item.replace(/[?[\]\\ ]/g, '');
          levels.push(key);
        });
        assign(params, levels, params[prop]);
        delete params[prop];
      }
    }

    return params;
  }

  function assign(obj, keyPath, value) {
    var lastKeyIndex = keyPath.length - 1;

    for (var i = 0; i < lastKeyIndex; ++i) {
      var key = keyPath[i];

      if (!(key in obj)) {
        obj[key] = {};
      }

      obj = obj[key];
    }

    obj[keyPath[lastKeyIndex]] = value;
  }

  /**
   * Removes params from url in browser
   * @param  {string}   param       - param key to remove from current URL
   * @param  {function} [callback]  - callback function to run. Only runs in browser
   * @return {promise}
   */

  function paramsRemove(param, callback) {
    if (!inBrowser) return Promise.resolve();
    return new Promise(function (resolve, reject) {
      if (window.history && window.history.replaceState) {
        var url = window.location.href;
        var cleanUrl = paramsClean(url, param);

        if (url !== cleanUrl) {
          /* replace URL with history API */
          // eslint-disable-next-line no-restricted-globals
          history.replaceState({}, '', cleanUrl);
        }
      }

      if (callback) callback();
      return resolve();
    });
  }

  /**
   * Get host domain of url
   * @param  {String} url - href of page
   * @return {String} hostname of page
   *
   * @example
   *  getDomainHost('https://subdomain.my-site.com/')
   *  > subdomain.my-site.com
   */

  function getDomainHost(url) {
    if (!inBrowser) return null;
    var a = document.createElement('a');
    a.setAttribute('href', url);
    return a.hostname;
  }
  /**
   * Get host domain of url
   * @param  {String} url - href of page
   * @return {String} base hostname of page
   *
   * @example
   *  getDomainHost('https://subdomain.my-site.com/')
   *  > my-site.com
   */

  function getDomainBase(url) {
    var host = getDomainHost(url) || '';
    return host.split('.').slice(-2).join('.');
  }
  /**
   * Remove TLD from domain string
   * @param  {String} baseDomain - host name of site
   * @return {String}
   * @example
   *  trimTld('google.com')
   *  > google
   */

  function trimTld(baseDomain) {
    var arr = baseDomain.split('.');
    return arr.length > 1 ? arr.slice(0, -1).join('.') : baseDomain;
  }
  var url = {
    trimTld: trimTld,
    getDomainBase: getDomainBase,
    getDomainHost: getDomainHost
  };

  var googleKey = 'google';
  /**
   * Checks a given url and parses referrer data
   * @param  {String} [referrer] - (optional) referring URL
   * @param  {String} [currentUrl] - (optional) the current url
   * @return {Object}     [description]
   */

  function parseReferrer(referrer, currentUrl) {
    if (!inBrowser) return false; // default referral data

    var refData = {
      'source': '(direct)',
      'medium': '(none)',
      'campaign': '(not set)' // Add raw ref url if external

    };

    if (referrer && isExternalReferrer(referrer)) {
      refData.referrer = referrer;
    }

    var domainInfo = parseDomain(referrer); // Read referrer URI and infer source

    if (domainInfo && Object.keys(domainInfo).length) {
      refData = Object.assign({}, refData, domainInfo);
    } // Read URI params and use set utm params


    var params = paramsParse(currentUrl);
    var paramKeys = Object.keys(params);

    if (paramKeys.length) {
      // set campaign params off matches
      var gaParams = paramKeys.reduce(function (acc, key) {
        // match utm params & dclid (display) & gclid (cpc)
        if (key.match(/^utm_/)) {
          acc["".concat(key.replace(/^utm_/, ''))] = params[key];
        } // https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters
        // dclid - cpc Cost-Per-Thousand Impressions
        // gclid - cpc Cost per Click


        if (key.match(/^(d|g)clid/)) {
          acc['source'] = googleKey;
          acc['medium'] = params.gclid ? 'cpc' : 'cpm';
          acc[key] = params[key];
        }

        return acc;
      }, {});
      refData = Object.assign({}, refData, gaParams);

      if (params.dclid || params.gclid) {
        refData['source'] = googleKey;
        refData['medium'] = params.gclid ? 'cpc' : 'cpm';
      }
    }

    return refData;
  }
  /**
   * Client side domain parser for determining marketing data.
   * @param  {String} referrer - ref url
   * @return {Object}
   */

  function parseDomain(referrer) {
    if (!referrer || !inBrowser) return false;
    var referringDomain = getDomainBase(referrer);
    var a = document.createElement('a');
    a.href = referrer; // Shim for the billion google search engines

    if (a.hostname.indexOf(googleKey) > -1) {
      referringDomain = googleKey;
    } // If is search engine


    if (searchEngines[referringDomain]) {
      var searchEngine = searchEngines[referringDomain];
      var queryParam = typeof searchEngine === 'string' ? searchEngine : searchEngine.p;
      var termRegex = new RegExp(queryParam + '=.*?([^&#]*|$)', 'gi');
      var term = a.search.match(termRegex);
      return {
        source: searchEngine.n || trimTld(referringDomain),
        medium: 'organic',
        term: (term ? term[0].split('=')[1] : '') || '(not provided)'
      };
    } // Default


    var medium = !isExternalReferrer(referrer) ? 'internal' : 'referral';
    return {
      source: a.hostname,
      medium: medium
    };
  }
  /**
   * Search engine query string data
   * @type {Object}
   */


  var searchEngines = {
    'daum.net': 'q',
    'eniro.se': 'search_word',
    'naver.com': 'query',
    'yahoo.com': 'p',
    'msn.com': 'q',
    'aol.com': 'q',
    'lycos.com': 'q',
    'ask.com': 'q',
    'cnn.com': 'query',
    'about.com': 'terms',
    'baidu.com': 'wd',
    'yandex.com': 'text',
    'seznam.cz': 'q',
    'search.com': 'q',
    'yam.com': 'k',
    'kvasir.no': 'q',
    'terra.com': 'query',
    'mynet.com': 'q',
    'rambler.ru': 'words',
    'google': 'q',
    'bing.com': {
      'p': 'q',
      'n': 'live'
    }
  };

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function parse(input) {
    var value;

    try {
      value = JSON.parse(input);

      if (typeof value === 'undefined') {
        value = input;
      }

      if (value === 'true') {
        value = true;
      }

      if (value === 'false') {
        value = false;
      }

      if (parseFloat(value) === value && _typeof(value) !== 'object') {
        value = parseFloat(value);
      }
    } catch (e) {
      value = input;
    }

    return value;
  }

  // const context = (typeof self === 'object' && self.self === self && self) || // eslint-disable-line
  //   (typeof global === 'object' && global.global === global && global) ||
  //   this
  //
  // export default context

  /* global self globalThis */
  var getGlobal = function getGlobal() {
    /* eslint-disable */
    if (typeof self !== 'undefined' && self) {
      return self;
    }
    /* eslint-enable */


    if (typeof window !== 'undefined' && window) {
      return window;
    }

    if (typeof global !== 'undefined' && global) {
      return global;
    }

    if (typeof globalThis !== 'undefined' && globalThis) {
      return globalThis;
    }
  };

  var globalContext = getGlobal();

  /**
   * Check if browser has access to LocalStorage
   *
   * @returns {Boolean}
   */

  function hasLocalStorage() {
    if (!inBrowser) return false;

    try {
      if (typeof localStorage === 'undefined' || typeof JSON === 'undefined') {
        return false;
      } // test for safari private


      localStorage.setItem('_test_', '1');
      localStorage.removeItem('_test_');
    } catch (err) {
      return false;
    }

    return true;
  }

  var hasLocalStorage$1 = hasLocalStorage();

  /**
   * Get storage item from localStorage, cookie, or window
   * @param  {string} key - key of item to get
   * @param  {object|string} [options] - storage options. If string location of where to get storage
   * @param  {string} [options.storage] - Define type of storage to pull from.
   * @return {Any}  the value of key
   */

  function getItem(key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!key) return null;
    var storage = getStorageType(options);
    /* 1. Try localStorage */

    if (useLocal(storage)) {
      var value = localStorage.getItem(key);
      if (value || storage === 'localStorage') return parse(value);
    }
    /* 2. Fallback to cookie */


    if (useCookie(storage)) {
      var _value = getCookie(key);

      if (_value || storage === 'cookie') return parse(_value);
    }
    /* 3. Fallback to window/global. TODO verify AWS lambda & check for conflicts */


    return globalContext[key] || null;
  }
  /**
   * Store values in localStorage, cookie, or window
   * @param {string} key - key of item to set
   * @param {*} value - value of item to set
   * @param {object|string} [options] - storage options. If string location of where to get storage
   * @param {string} [options.storage] - Define type of storage to pull from.
   * @returns {object} returns old value, new values, & location of storage
   */

  function setItem(key, value) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!key || !value) return false;
    var storage = getStorageType(options);
    var saveValue = JSON.stringify(value);
    /* 1. Try localStorage */

    if (useLocal(storage)) {
      // console.log('SET as localstorage', saveValue)
      var _oldValue = parse(localStorage.getItem(key));

      localStorage.setItem(key, saveValue);
      return {
        value: value,
        oldValue: _oldValue,
        type: 'localStorage'
      };
    }
    /* 2. Fallback to cookie */


    if (useCookie(storage)) {
      // console.log('SET as cookie', saveValue)
      var _oldValue2 = parse(getCookie(key));

      setCookie(key, saveValue);
      return {
        value: value,
        oldValue: _oldValue2,
        type: 'cookie'
      };
    }
    /* 3. Fallback to window/global */


    var oldValue = globalContext[key]; // console.log('SET as window', value)

    globalContext[key] = value;
    return {
      value: value,
      oldValue: oldValue,
      type: 'window'
    };
  }
  /**
   * Remove values from localStorage, cookie, or window
   * @param {string} key - key of item to set
   * @param {object|string} [options] - storage options. If string location of where to get storage
   * @param {string} [options.storage] - Define type of storage to pull from.
   */

  function removeItem(key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!key) return false;
    var storage = getStorageType(options);
    /* 1. Try localStorage */

    if (useLocal(storage)) {
      localStorage.removeItem(key);
      return null;
    }
    /* 2. Fallback to cookie */


    if (useCookie(storage)) {
      removeCookie(key);
      return null;
    }
    /* 3. Fallback to window/global */


    globalContext[key] = null;
    return null;
  }

  function getStorageType(options) {
    return typeof options === 'string' ? options : options.storage;
  }

  function useLocal(storage) {
    return hasLocalStorage$1 && (!storage || storage === 'localStorage');
  }

  function useCookie(storage) {
    return cookiesSupported && (!storage || storage === 'cookie');
  }

  var index = {
    getItem: getItem,
    setItem: setItem,
    removeItem: removeItem
  };

  function uuid() {
    var lut = [];

    for (var i = 0; i < 256; i++) {
      lut[i] = (i < 16 ? '0' : '') + i.toString(16);
    }

    return function () {
      var d0 = genNumber();
      var d1 = genNumber();
      var d2 = genNumber();
      var d3 = genNumber();
      /* eslint-disable */

      return "".concat(lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff], "-").concat(lut[d1 & 0xff]).concat(lut[d1 >> 8 & 0xff], "-").concat(lut[d1 >> 16 & 0x0f | 0x40]).concat(lut[d1 >> 24 & 0xff], "-").concat(lut[d2 & 0x3f | 0x80]).concat(lut[d2 >> 8 & 0xff], "-").concat(lut[d2 >> 16 & 0xff]).concat(lut[d2 >> 24 & 0xff]).concat(lut[d3 & 0xff]).concat(lut[d3 >> 8 & 0xff]).concat(lut[d3 >> 16 & 0xff]).concat(lut[d3 >> 24 & 0xff]);
      /* eslint-enable */
    }();
  }

  function genNumber() {
    return Math.random() * 0xffffffff | 0;
  }

  exports.cookie = cookie;
  exports.decodeUri = decode;
  exports.getBrowserLocale = getBrowserLocale;
  exports.getTimeZone = getTimeZone;
  exports.inBrowser = inBrowser;
  exports.isExternalReferrer = isExternalReferrer;
  exports.isScriptLoaded = isScriptLoaded;
  exports.noOp = noOp;
  exports.paramsClean = paramsClean;
  exports.paramsGet = getValueParamValue;
  exports.paramsParse = paramsParse;
  exports.paramsRemove = paramsRemove;
  exports.parseReferrer = parseReferrer;
  exports.storage = index;
  exports.url = url;
  exports.uuid = uuid;
  exports.globalContext = globalContext;

  return exports;

}({}));
